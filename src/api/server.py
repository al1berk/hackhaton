# src/api/server.py
import asyncio
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, UploadFile, File, HTTPException
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from pathlib import Path
import json
from datetime import datetime
import uvicorn
import logging
from fastapi.middleware.cors import CORSMiddleware
from langchain_core.messages import HumanMessage  # Bu satƒ±rƒ± ekledim
from core.conversation import AsyncLangGraphDialog
from core.config import Config
from core.vector_store import VectorStore
from core.chat_manager import ChatManager
import shutil

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

PROJECT_ROOT = Path(__file__).resolve().parents[2]
STATIC_DIR = PROJECT_ROOT / "static"
STATIC_DIR.mkdir(exist_ok=True)

UPLOAD_DIR = Path(Config.UPLOAD_DIR)
UPLOAD_DIR.mkdir(exist_ok=True)

app = FastAPI(title="LangGraph + CrewAI Async Multi-Agent Chat with RAG")

origins = ["http://localhost", "http://localhost:8000", "http://127.0.0.1", "http://127.0.0.1:8000"]

app.add_middleware(CORSMiddleware, allow_origins=origins, allow_credentials=True, allow_methods=["*"], allow_headers=["*"])

app.mount("/static", StaticFiles(directory=STATIC_DIR), name="static")

# Global deƒüi≈ükenler
dialog_instances = {}
chat_manager = ChatManager()

@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Async LangGraph + CrewAI Multi-Agent System with RAG ve Chat History ba≈ülatƒ±lƒ±yor...")
    try:
        Config.validate_config()
        logger.info("‚úÖ API anahtarlarƒ± doƒürulandƒ±")
        logger.info(f"‚úÖ Google API Key: {Config.GOOGLE_API_KEY[:10]}...")
        logger.info("‚úÖ Chat Manager ba≈ülatƒ±ldƒ±")
    except Exception as e:
        logger.error(f"‚ùå Startup hatasƒ±: {e}")
        logger.error(f"‚ùå Config durumu: GOOGLE_API_KEY={'Var' if Config.GOOGLE_API_KEY else 'Yok'}")
        raise e

@app.get("/", response_class=HTMLResponse)
async def serve_index():
    index_path = STATIC_DIR / "index.html"
    if not index_path.exists():
        # HTML dosyasƒ±nƒ± olu≈ütur
        html_content = """<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LangGraph AI Assistant</title>
    <link rel="stylesheet" href="/static/css/main.css">
    <link rel="stylesheet" href="/static/css/components/chat_history.css">
    <link rel="stylesheet" href="/static/css/components/toast.css">
    <link rel="stylesheet" href="/static/css/components/error_fallback.css">
    <link rel="stylesheet" href="/static/css/components/welcome_actions.css">
    <link rel="stylesheet" href="/static/css/test-styles.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="logo">
                    <i class="fas fa-robot"></i>
                    <span>AI Assistant</span>
                </div>
                <button class="new-chat-btn" onclick="startNewChat()">
                    <i class="fas fa-plus"></i>
                    Yeni Sohbet
                </button>
            </div>
            
            <!-- PDF y√∂netim b√∂l√ºm√º -->
            <div class="pdf-section">
                <div class="pdf-header">
                    <h3><i class="fas fa-file-pdf"></i> PDF Dok√ºmanlar</h3>
                    <button class="upload-pdf-btn" onclick="document.getElementById('pdfFileInput').click()">
                        <i class="fas fa-upload"></i>
                        PDF Y√ºkle
                    </button>
                </div>
                <div class="pdf-stats" id="pdfStats">
                    <div class="stat-item">
                        <span class="stat-label">Toplam PDF:</span>
                        <span class="stat-value" id="totalPdfs">0</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Vekt√∂r Par√ßa:</span>
                        <span class="stat-value" id="totalChunks">0</span>
                    </div>
                </div>
                <div class="pdf-list" id="pdfList">
                    <!-- PDF listesi buraya y√ºklenecek -->
                </div>
            </div>
            
            <!-- Gizli file input -->
            <input type="file" id="pdfFileInput" accept=".pdf" style="display: none;">
            
            <!-- Sohbet ge√ßmi≈üi -->
            <div class="chat-history">
                <div class="chat-history-header">
                    <h3>Sohbet Ge√ßmi≈üi</h3>
                </div>
                <div class="chat-list" id="chatList">
                    <!-- Chat history items will be populated here -->
                </div>
            </div>
            
            <div class="sidebar-footer">
                <div class="user-info">
                    <div class="user-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="user-details">
                        <span class="username">Kullanƒ±cƒ±</span>
                        <span class="status">√áevrimi√ßi</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Chat Area -->
        <div class="main-content">
            <!-- Header -->
            <div class="chat-header">
                <div class="header-left">
                    <h1>LangGraph AI Assistant</h1>
                    <span class="subtitle">CrewAI + RAG ile G√º√ßlendirilmi≈ü Akƒ±llƒ± Asistan</span>
                </div>
                <div class="header-right">
                    <div class="connection-status" id="connectionStatus">
                        <div class="status-indicator disconnected"></div>
                        <span>Baƒülanƒ±yor...</span>
                    </div>
                    <button class="settings-btn" onclick="toggleSettings()">
                        <i class="fas fa-cog"></i>
                    </button>
                </div>
            </div>

            <!-- Messages Container -->
            <div class="messages-container" id="messagesContainer">
                <div class="welcome-message">
                    <div class="welcome-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <h2>Merhaba! üëã</h2>
                    <p>Size nasƒ±l yardƒ±mcƒ± olabilirim? A≈üaƒüƒ±daki konularda uzmanƒ±m:</p>
                    <div class="feature-list">
                        <div class="feature-item"><i class="fas fa-search"></i> Web ara≈ütƒ±rmasƒ±</div>
                        <div class="feature-item"><i class="fas fa-file-pdf"></i> PDF dok√ºman analizi</div>
                        <div class="feature-item"><i class="fas fa-brain"></i> Akƒ±llƒ± soru-cevap</div>
                        <div class="feature-item"><i class="fas fa-chart-line"></i> Veri analizi</div>
                    </div>
                    <div class="welcome-actions">
                        <button class="action-btn" onclick="startNewChat()">
                            <i class="fas fa-plus"></i>
                            Yeni Sohbet Ba≈ülat
                        </button>
                        <button class="action-btn" onclick="document.getElementById('pdfFileInput').click()">
                            <i class="fas fa-file-upload"></i>
                            PDF Y√ºkle
                        </button>
                    </div>
                </div>
            </div>

            <!-- Input Area -->
            <div class="input-area">
                <div class="input-container">
                    <div class="input-wrapper">
                        <textarea 
                            id="messageInput" 
                            placeholder="Mesajƒ±nƒ±zƒ± buraya yazƒ±n veya PDF y√ºkleyerek dok√ºmanlarƒ±nƒ±z hakkƒ±nda soru sorun..." 
                            rows="1"
                            maxlength="2000"
                        ></textarea>
                        <div class="input-actions">
                            <button class="attach-btn" title="PDF Y√ºkle" onclick="document.getElementById('pdfFileInput').click()">
                                <i class="fas fa-file-pdf"></i>
                            </button>
                            <button class="emoji-btn" title="Emoji Ekle">
                                <i class="fas fa-smile"></i>
                            </button>
                            <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                    <div class="input-info">
                        <span class="char-count" id="charCount">0/2000</span>
                        <span class="tip">Enter ile g√∂nder, Shift+Enter ile yeni satƒ±r</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Settings Modal -->
    <div class="modal-overlay" id="settingsModal">
        <div class="modal">
            <div class="modal-header">
                <h3>Ayarlar</h3>
                <button class="close-btn" onclick="toggleSettings()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="setting-group">
                    <label>Tema</label>
                    <select id="themeSelect">
                        <option value="light">A√ßƒ±k</option>
                        <option value="dark">Koyu</option>
                        <option value="auto">Otomatik</option>
                    </select>
                </div>
                <div class="setting-group">
                    <label>Yazƒ± Boyutu</label>
                    <select id="fontSizeSelect">
                        <option value="small">K√º√ß√ºk</option>
                        <option value="medium" selected>Orta</option>
                        <option value="large">B√ºy√ºk</option>
                    </select>
                </div>
                <div class="setting-group">
                    <label>Ses Bildirimleri</label>
                    <input type="checkbox" id="soundNotifications" checked>
                </div>
                <div class="setting-group">
                    <label>PDF Ara≈ütƒ±rmasƒ± (RAG)</label>
                    <input type="checkbox" id="ragEnabled" checked>
                    <small>PDF dok√ºmanlarƒ±nƒ±zda otomatik arama</small>
                </div>
            </div>
        </div>
    </div>

    <!-- PDF Upload Progress Modal -->
    <div class="modal-overlay" id="uploadModal" style="display: none;">
        <div class="modal upload-modal">
            <div class="modal-header">
                <h3><i class="fas fa-upload"></i> PDF Y√ºkleniyor</h3>
            </div>
            <div class="modal-body">
                <div class="upload-progress">
                    <div class="upload-info">
                        <div class="upload-filename" id="uploadFilename">Dosya se√ßiliyor...</div>
                        <div class="upload-status" id="uploadStatus">Hazƒ±rlanƒ±yor...</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                    <div class="upload-details" id="uploadDetails">
                        <div class="detail-item">
                            <span>Boyut:</span>
                            <span id="fileSize">-</span>
                        </div>
                        <div class="detail-item">
                            <span>Durum:</span>
                            <span id="processStatus">Bekliyor</span>
                        </div>
                    </div>
                </div>
                <div class="upload-actions">
                    <button class="cancel-upload-btn" onclick="cancelUpload()">ƒ∞ptal</button>
                </div>
            </div>
        </div>
    </div>

    <script type="module" src="/static/js/main.js"></script>
</body>
</html>"""
        with open(index_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    return FileResponse(index_path)

# Chat API endpoints
@app.get("/chats")
async def get_chats():
    try:
        chats = chat_manager.get_all_chats()
        return JSONResponse({
            "success": True,
            "chats": chats
        })
    except Exception as e:
        logger.error(f"‚ùå Sohbet listeleme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Sohbet listeleme hatasƒ±: {str(e)}")

@app.post("/chats/new")
async def create_new_chat():
    try:
        chat_id = chat_manager.create_new_chat()
        chat_info = chat_manager.get_chat_info(chat_id)
        
        return JSONResponse({
            "success": True,
            "chat": chat_info
        })
    except Exception as e:
        logger.error(f"‚ùå Yeni sohbet olu≈üturma hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Sohbet olu≈üturma hatasƒ±: {str(e)}")

@app.get("/chats/{chat_id}")
async def get_chat_details(chat_id: str):
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        messages = chat_manager.get_chat_messages(chat_id)
        
        vector_store = VectorStore(Config.VECTOR_STORE_PATH, chat_id=chat_id)
        stats = vector_store.get_stats()
        
        return JSONResponse({
            "success": True,
            "chat": chat_info,
            "messages": messages,
            "vector_store_stats": stats
        })
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Sohbet detay hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Sohbet detay hatasƒ±: {str(e)}")

@app.delete("/chats/{chat_id}")
async def delete_chat(chat_id: str):
    try:
        success = chat_manager.delete_chat(chat_id)
        if success:
            return JSONResponse({
                "success": True,
                "message": "Sohbet ba≈üarƒ±yla silindi"
            })
        else:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Sohbet silme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Sohbet silme hatasƒ±: {str(e)}")

@app.post("/chats/{chat_id}/upload-pdf")
async def upload_pdf_to_chat(chat_id: str, file: UploadFile = File(...)):
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        if not file.filename.lower().endswith('.pdf'):
            raise HTTPException(status_code=400, detail="Sadece PDF dosyalarƒ± desteklenir")
        
        if file.size > Config.MAX_PDF_SIZE:
            raise HTTPException(status_code=400, detail=f"Dosya boyutu {Config.MAX_PDF_SIZE // 1024 // 1024}MB'tan b√ºy√ºk olamaz")
        
        chat_upload_dir = chat_manager.get_chat_pdf_directory(chat_id)
        chat_upload_dir.mkdir(exist_ok=True)
        
        safe_filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file.filename}"
        file_path = chat_upload_dir / safe_filename
        
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        vector_store = VectorStore(Config.VECTOR_STORE_PATH, chat_id=chat_id)
        
        success = vector_store.add_document_from_path(
            file_path=str(file_path),  # Dosyanƒ±n yolunu string olarak g√∂nder
            filename=file.filename,
            metadata={
                "upload_path": str(file_path),
                "original_size": file.size,
                "safe_filename": safe_filename,
                "chat_id": chat_id
            }
        )
        
        if success:
            stats = vector_store.get_stats()
            chat_manager.update_pdf_count(chat_id, stats["total_documents"])
            
            return JSONResponse({
                "success": True,
                "message": f"'{file.filename}' ba≈üarƒ±yla y√ºklendi ve vekt√∂rle≈ütirildi",
                "filename": file.filename,
                "safe_filename": safe_filename,
                "stats": stats,
                "chat_id": chat_id
            })
        else:
            file_path.unlink(missing_ok=True)
            raise HTTPException(status_code=500, detail="PDF i≈ülenirken hata olu≈ütu")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå PDF y√ºkleme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"PDF y√ºkleme hatasƒ±: {str(e)}")
    
@app.post("/chats/{chat_id}/upload-image")
async def upload_image_to_chat(chat_id: str, file: UploadFile = File(...)):
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        # Dosya formatƒ± kontrol√º (isteƒüe baƒülƒ±, DocumentProcessor da yapabilir)
        allowed_extensions = ['.png', '.jpg', '.jpeg', '.bmp', '.webp']
        if not any(file.filename.lower().endswith(ext) for ext in allowed_extensions):
            raise HTTPException(status_code=400, detail=f"Sadece resim dosyalarƒ± desteklenir: {', '.join(allowed_extensions)}")
        
        if file.size > Config.MAX_IMAGE_SIZE: # Config'e MAX_IMAGE_SIZE ekle (√∂rn: 10 * 1024 * 1024)
            raise HTTPException(status_code=400, detail=f"Dosya boyutu {Config.MAX_IMAGE_SIZE // 1024 // 1024}MB'tan b√ºy√ºk olamaz")
        
        chat_upload_dir = chat_manager.get_chat_pdf_directory(chat_id) # Aynƒ± klas√∂r√º kullanabiliriz
        chat_upload_dir.mkdir(exist_ok=True)
        
        safe_filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file.filename}"
        file_path = chat_upload_dir / safe_filename
        
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        vector_store = VectorStore(Config.VECTOR_STORE_PATH, chat_id=chat_id)
        
        # Yine aynƒ± fonksiyonu √ßaƒüƒ±rƒ±yoruz, √ß√ºnk√º DocumentProcessor dosya t√ºr√ºn√º anlƒ±yor
        success = vector_store.add_document_from_path(
            file_path=str(file_path),
            filename=file.filename,
            metadata={
                "upload_path": str(file_path),
                "original_size": file.size,
                "safe_filename": safe_filename,
                "chat_id": chat_id,
                "source_type": "ocr"
            }
        )
        
        if success:
            stats = vector_store.get_stats()
            chat_manager.update_pdf_count(chat_id, stats["total_documents"]) # ƒ∞smi yanƒ±ltƒ±cƒ± olsa da ≈üimdilik belge sayƒ±sƒ±nƒ± tutar
            
            return JSONResponse({
                "success": True,
                "message": f"'{file.filename}' ba≈üarƒ±yla y√ºklendi ve OCR ile i≈ülendi",
                "filename": file.filename,
                "stats": stats
            })
        else:
            file_path.unlink(missing_ok=True)
            raise HTTPException(status_code=500, detail="Resim i≈ülenirken hata olu≈ütu")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Resim y√ºkleme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Resim y√ºkleme hatasƒ±: {str(e)}")


@app.get("/chats/{chat_id}/pdfs")
async def list_chat_pdfs(chat_id: str):
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        vector_store = VectorStore(Config.VECTOR_STORE_PATH, chat_id=chat_id)
        documents = vector_store.get_all_documents()
        stats = vector_store.get_stats()
        
        return JSONResponse({
            "success": True,
            "documents": documents,
            "stats": stats,
            "chat_id": chat_id
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå PDF listeleme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"PDF listeleme hatasƒ±: {str(e)}")

@app.delete("/chats/{chat_id}/pdfs/{file_hash}")
async def delete_chat_pdf(chat_id: str, file_hash: str):
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        vector_store = VectorStore(Config.VECTOR_STORE_PATH, chat_id=chat_id)
        success = vector_store.delete_document(file_hash)
        
        if success:
            stats = vector_store.get_stats()
            chat_manager.update_pdf_count(chat_id, stats["total_documents"])
            
            return JSONResponse({
                "success": True,
                "message": "PDF ba≈üarƒ±yla silindi",
                "stats": stats
            })
        else:
            raise HTTPException(status_code=404, detail="PDF bulunamadƒ±")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå PDF silme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"PDF silme hatasƒ±: {str(e)}")

@app.post("/chats/{chat_id}/evaluate-test")
async def evaluate_test_results(chat_id: str, test_results: dict):
    """Test sonu√ßlarƒ±nƒ± deƒüerlendirir ve eksik konularƒ± analiz eder"""
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        # Test sonu√ßlarƒ±nƒ± analiz et
        correct_answers = 0
        total_questions = 0
        wrong_topics = []
        
        for question_result in test_results.get("results", []):
            total_questions += 1
            if question_result.get("is_correct", False):
                correct_answers += 1
            else:
                # Yanlƒ±≈ü cevaplanan sorunun konusunu ekle
                topic = question_result.get("topic", "Genel")
                if topic not in wrong_topics:
                    wrong_topics.append(topic)
        
        # Ba≈üarƒ± oranƒ±nƒ± hesapla
        success_rate = (correct_answers / total_questions) * 100 if total_questions > 0 else 0
        
        # Eksik konularƒ± belirle
        weak_areas = []
        for topic in wrong_topics:
            weak_areas.append({
                "topic": topic,
                "importance": "high" if success_rate < 50 else "medium"
            })
        
        # Test deƒüerlendirme raporu
        evaluation_result = {
            "test_id": test_results.get("test_id"),
            "chat_id": chat_id,
            "evaluation_date": datetime.now().isoformat(),
            "statistics": {
                "total_questions": total_questions,
                "correct_answers": correct_answers,
                "wrong_answers": total_questions - correct_answers,
                "success_rate": round(success_rate, 2)
            },
            "performance_level": (
                "excellent" if success_rate >= 90 else
                "good" if success_rate >= 70 else
                "fair" if success_rate >= 50 else
                "needs_improvement"
            ),
            "weak_areas": weak_areas,
            "recommendations": generate_recommendations(success_rate, weak_areas)
        }
        
        # Sonu√ßlarƒ± chat'e mesaj olarak kaydet
        evaluation_message = format_evaluation_message(evaluation_result)
        chat_manager.save_message(chat_id, {
            "type": "system",
            "content": evaluation_message,
            "metadata": {
                "message_type": "test_evaluation",
                "evaluation_data": evaluation_result
            }
        })
        
        # YENƒ∞: Eksik konularƒ± ayrƒ± mesajlar olarak da kaydet
        if evaluation_result["weak_areas"]:
            topics_message = "üéØ **Eksik Olduƒüun Konular:**\n\n"
            for i, area in enumerate(evaluation_result["weak_areas"], 1):
                topics_message += f"{i}. **{area['topic']}**\n"
                topics_message += f"   üí° Bu konuyu detaylƒ± a√ßƒ±klamamƒ± istersen: \"'{area['topic']}' konusunu a√ßƒ±kla\"\n\n"
            
            topics_message += "üìù **Not:** Yukarƒ±daki konulardan herhangi birini se√ßerek benden detaylƒ± a√ßƒ±klama isteyebilirsin!"
            
            chat_manager.save_message(chat_id, {
                "type": "ai",
                "content": topics_message,
                "metadata": {
                    "message_type": "weak_areas_suggestions",
                    "weak_areas": [area["topic"] for area in evaluation_result["weak_areas"]]
                }
            })
        
        return JSONResponse({
            "success": True,
            "evaluation": evaluation_result,
            "message": "Test deƒüerlendirmesi tamamlandƒ±"
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Test deƒüerlendirme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Test deƒüerlendirme hatasƒ±: {str(e)}")

async def evaluate_test_results_internal(chat_id: str, test_results: dict):
    """ƒ∞√ß kullanƒ±m i√ßin test sonu√ßlarƒ±nƒ± deƒüerlendirir"""
    try:
        # Test sonu√ßlarƒ±nƒ± analiz et
        correct_answers = 0
        total_questions = 0
        wrong_topics = []
        
        for question_result in test_results.get("detailed_results", []):
            total_questions += 1
            if question_result.get("is_correct", False):
                correct_answers += 1
            else:
                # Yanlƒ±≈ü cevaplanan sorunun konusunu ekle
                topic = question_result.get("topic", "Genel")
                if topic not in wrong_topics:
                    wrong_topics.append(topic)
        
        # Ba≈üarƒ± oranƒ±nƒ± hesapla
        success_rate = (correct_answers / total_questions) * 100 if total_questions > 0 else 0
        
        # Eksik konularƒ± belirle
        weak_areas = []
        for topic in wrong_topics:
            weak_areas.append({
                "topic": topic,
                "importance": "high" if success_rate < 50 else "medium"
            })
        
        # Test deƒüerlendirme raporu
        evaluation_result = {
            "test_id": test_results.get("test_id"),
            "chat_id": chat_id,
            "evaluation_date": datetime.now().isoformat(),
            "statistics": {
                "total_questions": total_questions,
                "correct_answers": correct_answers,
                "wrong_answers": total_questions - correct_answers,
                "success_rate": round(success_rate, 2)
            },
            "performance_level": (
                "excellent" if success_rate >= 90 else
                "good" if success_rate >= 70 else
                "fair" if success_rate >= 50 else
                "needs_improvement"
            ),
            "weak_areas": weak_areas,
            "recommendations": generate_recommendations(success_rate, weak_areas)
        }
        
        # Sonu√ßlarƒ± chat'e mesaj olarak kaydet
        evaluation_message = format_evaluation_message(evaluation_result)
        chat_manager.save_message(chat_id, {
            "type": "system",
            "content": evaluation_message,
            "metadata": {
                "message_type": "test_evaluation",
                "evaluation_data": evaluation_result
            }
        })
        
        return evaluation_result
        
    except Exception as e:
        logger.error(f"‚ùå ƒ∞√ß test deƒüerlendirme hatasƒ±: {e}")
        raise e

async def evaluate_classic_answer_with_llm(prompt: str, llm) -> str:
    """LLM kullanarak klasik soru cevabƒ±nƒ± deƒüerlendirir"""
    try:
        from langchain_core.messages import HumanMessage
        
        # LLM'e g√∂nder
        response = await llm.ainvoke([HumanMessage(content=prompt)])
        
        # Yanƒ±tƒ± string olarak d√∂nd√ºr
        if hasattr(response, 'content'):
            return response.content
        else:
            return str(response)
            
    except Exception as e:
        logger.error(f"‚ùå LLM deƒüerlendirme hatasƒ±: {e}")
        # Fallback yanƒ±t
        return "DOƒûRU/YANLI≈û: Doƒüru\nPUAN: 70\nGERƒ∞ Bƒ∞LDƒ∞Rƒ∞M: Deƒüerlendirme yapƒ±lamadƒ±, cevabƒ±nƒ±z kaydedildi."

def generate_recommendations(success_rate: float, weak_areas: list) -> list:
    """Ba≈üarƒ± oranƒ± ve eksik konulara g√∂re √∂neriler √ºretir"""
    recommendations = []
    
    if success_rate >= 90:
        recommendations.append("üéâ M√ºkemmel performans! Konuyu √ßok iyi anlamƒ±≈üsƒ±n.")
        recommendations.append("üìà Daha zorlu konulara ge√ßebilir veya bu konuyu ba≈ükalarƒ±na √∂ƒüretmeyi deneyebilirsin.")
    elif success_rate >= 70:
        recommendations.append("üëç ƒ∞yi bir performans g√∂sterdin!")
        recommendations.append("üîÑ Eksik kalan konularƒ± tekrar ederek %90'ƒ±n √ºzerine √ßƒ±kabilirsin.")
    elif success_rate >= 50:
        recommendations.append("üìö Orta seviyede bir performans. Daha fazla √ßalƒ±≈ümayla iyile≈ütirebilirsin.")
        recommendations.append("üéØ Eksik konulara odaklanarak tekrar yapmakta fayda var.")
    else:
        recommendations.append("üí™ Bu konuyu daha detaylƒ± √ßalƒ±≈üman gerekiyor.")
        recommendations.append("üìñ Temel kavramlarƒ± tekrar g√∂zden ge√ßirmeyi √∂neririm.")
    
    if weak_areas:
        topics_text = ", ".join([area["topic"] for area in weak_areas])
        recommendations.append(f"üéØ √ñzellikle ≈üu konulara odaklan: {topics_text}")
        recommendations.append("üí° Bu konular i√ßin benden detaylƒ± a√ßƒ±klama isteyebilirsin!")
    
    return recommendations

def format_evaluation_message(evaluation: dict) -> str:
    """Test deƒüerlendirmesini kullanƒ±cƒ± dostu mesaja √ßevirir"""
    stats = evaluation["statistics"]
    success_rate = stats["success_rate"]
    
    # Emoji ve seviye belirleme
    if success_rate >= 90:
        emoji = "üéâ"
        level_text = "M√ºkemmel"
        color = "üü¢"
    elif success_rate >= 70:
        emoji = "üëç"
        level_text = "ƒ∞yi"
        color = "üü°"
    elif success_rate >= 50:
        emoji = "üìö"
        level_text = "Orta"
        color = "üü†"
    else:
        emoji = "üí™"
        level_text = "Geli≈üime A√ßƒ±k"
        color = "üî¥"
    
    message = f"{emoji} **Test Deƒüerlendirmen**\n\n"
    message += f"{color} **Performans Seviyesi:** {level_text}\n"
    message += f"üìä **Ba≈üarƒ± Oranƒ±:** %{success_rate}\n"
    message += f"‚úÖ **Doƒüru:** {stats['correct_answers']}/{stats['total_questions']}\n"
    message += f"‚ùå **Yanlƒ±≈ü:** {stats['wrong_answers']}\n\n"
    
    # Eksik konular
    if evaluation["weak_areas"]:
        message += "üéØ **Eksik Olduƒüun Konular:**\n"
        for area in evaluation["weak_areas"]:
            message += f"‚Ä¢ {area['topic']}\n"
        message += "\n"
    
    # √ñneriler
    message += "üí° **√ñnerilerim:**\n"
    for rec in evaluation["recommendations"]:
        message += f"‚Ä¢ {rec}\n"
    
    message += "\nüìñ **Eksik konularƒ± anlatmamƒ± istersen, sadece s√∂yle!**"
    
    return message


# WebSocket endpoint - SORUNLAR D√úZELTƒ∞LDƒ∞

@app.websocket("/ws/{chat_id}")
async def websocket_endpoint(websocket: WebSocket, chat_id: str):
    await websocket.accept()
    logger.info(f"üîå WebSocket baƒülantƒ±sƒ± kuruldu - Chat: {chat_id}")
    
    # Chat ID 'default' ise yeni chat olu≈ütur
    if chat_id == 'default':
        try:
            chat_id = chat_manager.create_new_chat()
            logger.info(f"‚úÖ 'default' chat ID i√ßin yeni chat olu≈üturuldu: {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå Yeni chat olu≈üturma hatasƒ±: {e}")
            chat_id = 'default'
    
    # Chat klas√∂r√ºn√ºn var olduƒüundan emin ol
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            # Chat yoksa olu≈ütur
            chat_id = chat_manager.create_new_chat()
            logger.info(f"‚úÖ Chat mevcut deƒüildi, yeni olu≈üturuldu: {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå Chat kontrol hatasƒ±: {e}")
        # Fallback olarak yeni chat olu≈ütur
        try:
            chat_id = chat_manager.create_new_chat()
            logger.info(f"‚úÖ Fallback: Yeni chat olu≈üturuldu: {chat_id}")
        except Exception as create_error:
            logger.error(f"‚ùå Fallback chat olu≈üturma hatasƒ±: {create_error}")
            chat_id = 'emergency_default'
    
    async def websocket_callback(message: str):
        try:
            await websocket.send_text(message)
        except Exception as e:
            logger.error(f"‚ùå WebSocket g√∂nderim hatasƒ±: {e}")
    
    # Dialog instance'ƒ± olu≈ütur veya al
    if chat_id not in dialog_instances:
        dialog_instances[chat_id] = AsyncLangGraphDialog(
            websocket_callback=websocket_callback,
            chat_id=chat_id,
            chat_manager=chat_manager
        )
    else:
        # Mevcut instance'ƒ± g√ºncelle
        dialog_instances[chat_id].websocket_callback = websocket_callback
        dialog_instances[chat_id].chat_manager = chat_manager
    
    dialog = dialog_instances[chat_id]
    
    # Sohbet ge√ßmi≈üini y√ºkle
    try:
        chat_messages = chat_manager.get_chat_messages(chat_id)
        if chat_messages:
            dialog.load_conversation_from_messages(chat_messages)
    except Exception as e:
        logger.error(f"‚ùå Sohbet ge√ßmi≈üi y√ºkleme hatasƒ±: {e}")
    
    # Client'a ger√ßek chat ID'yi g√∂nder
    try:
        # Vector store istatistiklerini al
        vector_store = VectorStore(Config.VECTOR_STORE_PATH, chat_id=chat_id)
        stats = vector_store.get_stats()
        
        await websocket.send_text(json.dumps({
            "type": "connection_established",
            "chat_id": chat_id,
            "message": f"Baƒülantƒ± kuruldu - Chat: {chat_id}",
            "vector_store_stats": stats,
            "timestamp": datetime.utcnow().isoformat()
        }))
        logger.info(f"‚úÖ Client'a baƒülantƒ± onayƒ± g√∂nderildi - Chat: {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå Baƒülantƒ± onay mesajƒ± hatasƒ±: {e}")
    
    try:
        while True:
            try:
                data = await websocket.receive_text()
                message_data = json.loads(data)
                
                if message_data.get("type") == "user_message":
                    # YENƒ∞ D√úZELTME: Mesaj formatƒ±nƒ± d√ºzelt
                    if "message" in message_data:
                        user_message = message_data["message"]
                    else:
                        # Legacy destek i√ßin direkt message olabilir
                        user_message = message_data.get("content", "")
                    
                    # Eƒüer mesaj nested object ise
                    if isinstance(user_message, dict):
                        user_message = user_message.get("message", "")
                    
                    # String'e √ßevir ve temizle
                    user_message = str(user_message).strip()
                    
                    # YENƒ∞: force_web_research parametresini kontrol et
                    force_web_research = message_data.get("force_web_research", False)
                    if force_web_research:
                        dialog.conversation_state["force_web_research"] = True
                    
                    if user_message:
                        response = await dialog.process_user_message(user_message)
                        if response:
                            await websocket.send_text(json.dumps({
                                "type": "ai_response",
                                "message": response,
                                "timestamp": datetime.utcnow().isoformat(),
                                "chat_id": chat_id
                            }))
                
                elif message_data.get("type") == "test_parameters_response":
                    # SORUN D√úZELTƒ∞LDƒ∞: Test parametreleri yanƒ±tƒ±nƒ± doƒüru ≈üekilde i≈üle
                    response_data = message_data.get("response", {})
                    
                    if not isinstance(response_data, dict):
                        logger.warning(f"‚ùå Ge√ßersiz test parametre formatƒ±: {response_data}")
                        continue

                    # SORUN D√úZELTƒ∞LMESƒ∞: Gelen veriyi doƒürudan state'e ekle
                    logger.info(f"üìù Test parametreleri alƒ±ndƒ±: {response_data}")
                    
                    # 1. Gelen yapƒ±sal veriyi doƒürudan konu≈üma durumuna (state) ekle
                    dialog.conversation_state["partial_test_params"].update(response_data)
                    
                    # 2. Test parametresi bekleme durumunu i≈üaretle
                    if not dialog.conversation_state.get("awaiting_test_params"):
                        dialog.conversation_state["awaiting_test_params"] = True
                        dialog.conversation_state["test_param_stage"] = "question_types"
                    
                    # 3. Durum makinesinin bir sonraki adƒ±mƒ± tetiklemesi i√ßin genel bir mesaj olu≈ütur
                    user_message = "Kullanƒ±cƒ± test parametrelerini se√ßti."
                    
                    # 4. Grafiƒüi normal akƒ±≈üƒ±nda √ßalƒ±≈ütƒ±r
                    response = await dialog.process_user_message(user_message)

                    # Eƒüer LangGraph'tan direct bir yanƒ±t gelirse, WebSocket √ºzerinden g√∂nder
                    if response:
                        await websocket.send_text(json.dumps({
                            "type": "ai_response",
                            "message": response,
                            "timestamp": datetime.utcnow().isoformat(),
                            "chat_id": chat_id
                        }))
                
                elif message_data.get("type") == "start_test":
                    # Test ba≈ülatma komutu
                    test_data = message_data.get("test_data", {})
                    
                    # Test verilerini localStorage i√ßin g√∂nder
                    await websocket.send_text(json.dumps({
                        "type": "test_data_ready",
                        "test_data": test_data,
                        "timestamp": datetime.utcnow().isoformat(),
                        "chat_id": chat_id
                    }))
                
                elif message_data.get("type") == "test_completed":
                    # Test tamamlandƒ±, sonu√ßlarƒ± deƒüerlendir
                    test_results = message_data.get("results", {})
                    
                    try:
                        # Test sonu√ßlarƒ±nƒ± analiz et ve chat'e kaydet
                        evaluation_result = await evaluate_test_results_internal(chat_id, test_results)
                        
                        # YENƒ∞: Eksik konularƒ± WebSocket √ºzerinden direkt g√∂nder
                        if evaluation_result.get("weak_areas"):
                            # Ana deƒüerlendirme mesajƒ±nƒ± g√∂nder
                            await websocket.send_text(json.dumps({
                                "type": "ai_response", 
                                "message": format_evaluation_message(evaluation_result),
                                "timestamp": datetime.utcnow().isoformat(),
                                "chat_id": chat_id
                            }))
                            
                            # Eksik konularƒ± ayrƒ± mesaj olarak g√∂nder
                            topics_message = "üéØ **Eksik Olduƒüun Konular:**\n\n"
                            topics_message += "Bu konularda biraz daha √ßalƒ±≈ümanda fayda var:\n\n"
                            
                            for i, area in enumerate(evaluation_result["weak_areas"], 1):
                                topic_name = area["topic"] if isinstance(area, dict) else area
                                topics_message += f"{i}. **{topic_name}**\n"
                                topics_message += f"   üí° Bu konuyu detaylƒ± a√ßƒ±klamamƒ± istersen: *\"{topic_name} konusunu a√ßƒ±kla\"*\n\n"
                            
                            topics_message += "üìù **Not:** Yukarƒ±daki konulardan herhangi birini se√ßerek benden detaylƒ± a√ßƒ±klama isteyebilirsin! Birlikte √∂ƒürenelim! ü§ù"
                            
                            await websocket.send_text(json.dumps({
                                "type": "ai_response",
                                "message": topics_message,
                                "timestamp": datetime.utcnow().isoformat(),
                                "chat_id": chat_id
                            }))
                        else:
                            # Eksik konu yoksa sadece ana deƒüerlendirme mesajƒ±nƒ± g√∂nder
                            await websocket.send_text(json.dumps({
                                "type": "ai_response",
                                "message": format_evaluation_message(evaluation_result) + "\n\nüéâ **Harika!** T√ºm konularda ba≈üarƒ±lƒ±sƒ±n! B√∂yle devam et! üëè",
                                "timestamp": datetime.utcnow().isoformat(),
                                "chat_id": chat_id
                            }))
                        
                        # Ayrƒ±ca eski formatƒ± da g√∂nder (geriye d√∂n√ºk uyumluluk i√ßin)
                        await websocket.send_text(json.dumps({
                            "type": "test_evaluation_complete",
                            "evaluation": evaluation_result,
                            "timestamp": datetime.utcnow().isoformat(),
                            "chat_id": chat_id
                        }))
                        
                    except Exception as e:
                        logger.error(f"‚ùå Test deƒüerlendirme hatasƒ±: {e}")
                        await websocket.send_text(json.dumps({
                            "type": "error",
                            "message": f"Test deƒüerlendirme hatasƒ±: {str(e)}"
                        }))
                
                elif message_data.get("type") == "llm_evaluation_request":
                    prompt = message_data.get("prompt", "")
                    question_index = message_data.get("questionIndex", 0)
                    metadata = message_data.get("metadata", {})
                    
                    logger.info(f"ü§ñ LLM deƒüerlendirme isteƒüi alƒ±ndƒ± (Soru: {question_index})")
                    
                    try:
                        # LLM √ßaƒürƒ±sƒ±na 30 saniyelik zaman a≈üƒ±mƒ± ekle
                        evaluation_result = await asyncio.wait_for(
                            evaluate_classic_answer_with_llm(prompt, dialog.llm),
                            timeout=30.0
                        )
                        
                        await websocket.send_text(json.dumps({
                            "type": "llm_evaluation_response",
                            "questionIndex": question_index,
                            "evaluation": evaluation_result,
                            "metadata": metadata,
                            "timestamp": datetime.utcnow().isoformat(),
                            "chat_id": chat_id
                        }))
                        logger.info(f"‚úÖ LLM deƒüerlendirmesi tamamlandƒ± (Soru: {question_index})")

                    except asyncio.TimeoutError:
                        logger.error(f"‚è∞ LLM deƒüerlendirmesi zaman a≈üƒ±mƒ±na uƒüradƒ± (Soru: {question_index})")
                        # Zaman a≈üƒ±mƒ± durumunda kullanƒ±cƒ±ya √∂zel bir mesaj g√∂nder
                        await websocket.send_text(json.dumps({
                            "type": "llm_evaluation_response",
                            "questionIndex": question_index,
                            "evaluation": "DOƒûRU/YANLI≈û: Doƒüru\nPUAN: 70\nGERƒ∞ Bƒ∞LDƒ∞Rƒ∞M: Deƒüerlendirme zaman a≈üƒ±mƒ±na uƒüradƒ±, bu nedenle cevabƒ±nƒ±z ge√ßici olarak doƒüru kabul edildi.",
                            "metadata": metadata,
                            "timestamp": datetime.utcnow().isoformat(),
                            "chat_id": chat_id
                        }))
                    except Exception as e:
                        # Diƒüer t√ºm hatalarƒ± yakala ve logla
                        logger.error(f"‚ùå LLM deƒüerlendirme hatasƒ± (Soru: {question_index}): {e}", exc_info=True)
                        # Genel hata durumunda kullanƒ±cƒ±ya mesaj g√∂nder
                        await websocket.send_text(json.dumps({
                            "type": "llm_evaluation_response",
                            "questionIndex": question_index,
                            "evaluation": "DOƒûRU/YANLI≈û: Doƒüru\nPUAN: 70\nGERƒ∞ Bƒ∞LDƒ∞Rƒ∞M: Deƒüerlendirme sƒ±rasƒ±nda bir hata olu≈ütu, bu nedenle cevabƒ±nƒ±z ge√ßici olarak doƒüru kabul edildi.",
                            "metadata": metadata,
                            "timestamp": datetime.utcnow().isoformat(),
                            "chat_id": chat_id
                        }))
                
                elif message_data.get("type") == "explain_topic":
                    # Eksik konu a√ßƒ±klamasƒ± istendi
                    topic = message_data.get("topic", "")
                    
                    # Bu konuyu a√ßƒ±klama talebini normal mesaj olarak i≈üle
                    explain_message = f"'{topic}' konusunu detaylƒ± olarak a√ßƒ±klayabilir misin?"
                    response = await dialog.process_user_message(explain_message)
                    
                    if response:
                        await websocket.send_text(json.dumps({
                            "type": "topic_explanation",
                            "topic": topic,
                            "explanation": response,
                            "timestamp": datetime.utcnow().isoformat(),
                            "chat_id": chat_id
                        }))
                
                elif message_data.get("type") == "ping":
                    await websocket.send_text(json.dumps({
                        "type": "pong",
                        "timestamp": datetime.utcnow().isoformat()
                    }))
            
            except WebSocketDisconnect:
                logger.info(f"üîå WebSocket baƒülantƒ±sƒ± kesildi - Chat: {chat_id}")
                break
            except json.JSONDecodeError:
                logger.error("‚ùå Ge√ßersiz JSON formatƒ±")
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": "Ge√ßersiz mesaj formatƒ±"
                }))
            except Exception as e:
                logger.error(f"‚ùå WebSocket mesaj i≈üleme hatasƒ±: {e}")
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"Mesaj i≈ülenirken hata olu≈ütu: {str(e)}"
                }))
    
    except WebSocketDisconnect:
        logger.info(f"üîå WebSocket baƒülantƒ±sƒ± sonlandƒ± - Chat: {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå WebSocket genel hatasƒ±: {e}")
    finally:
        # Cleanup
        if chat_id in dialog_instances:
            dialog_instances[chat_id].websocket_callback = None

@app.post("/chats/{chat_id}/save-test")
async def save_test_to_chat(chat_id: str, test_data: dict):
    """Test verilerini chat'e kalƒ±cƒ± olarak kaydet"""
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        # Test verilerini chat klas√∂r√ºne kaydet
        chat_dir = chat_manager.get_chat_directory(chat_id)
        test_file = chat_dir / "saved_tests.json"
        
        # Mevcut testleri y√ºkle
        saved_tests = []
        if test_file.exists():
            try:
                with open(test_file, 'r', encoding='utf-8') as f:
                    saved_tests = json.load(f)
            except Exception as e:
                logger.warning(f"Saved tests dosyasƒ± okunamadƒ±: {e}")
                saved_tests = []
        
        # Yeni test ekle
        test_entry = {
            "test_id": test_data.get("test_id", f"test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"),
            "created_at": datetime.now().isoformat(),
            "questions": test_data.get("questions", {}),
            "parameters": test_data.get("parameters", {}),
            "title": test_data.get("title", "Olu≈üturulan Test")
        }
        
        saved_tests.append(test_entry)
        
        # Dosyaya kaydet
        with open(test_file, 'w', encoding='utf-8') as f:
            json.dump(saved_tests, f, ensure_ascii=False, indent=2)
        
        # Chat mesajƒ± olarak da kaydet
        chat_manager.save_message(chat_id, {
            "type": "system",
            "content": f"üß† **Test Kaydedildi:** {test_entry['title']}\nüìä Test ID: {test_entry['test_id']}\n‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            "metadata": {
                "message_type": "test_saved",
                "test_id": test_entry['test_id']
            }
        })
        
        return JSONResponse({
            "success": True,
            "message": "Test ba≈üarƒ±yla kaydedildi",
            "test_id": test_entry['test_id']
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Test kaydetme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Test kaydetme hatasƒ±: {str(e)}")

@app.get("/chats/{chat_id}/tests")
async def get_chat_tests(chat_id: str):
    """Chat'e ait kaydedilmi≈ü testleri getir"""
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        # Test dosyasƒ±nƒ± oku
        chat_dir = chat_manager.get_chat_directory(chat_id)
        test_file = chat_dir / "saved_tests.json"
        
        saved_tests = []
        if test_file.exists():
            try:
                with open(test_file, 'r', encoding='utf-8') as f:
                    saved_tests = json.load(f)
            except Exception as e:
                logger.warning(f"Saved tests dosyasƒ± okunamadƒ±: {e}")
                saved_tests = []
        
        return JSONResponse({
            "success": True,
            "tests": saved_tests,
            "chat_id": chat_id
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Test listesi hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Test listesi hatasƒ±: {str(e)}")

@app.get("/chats/{chat_id}/tests/{test_id}")
async def get_test_by_id(chat_id: str, test_id: str):
    """Belirli bir test'i ID ile getir"""
    try:
        chat_info = chat_manager.get_chat_info(chat_id)
        if not chat_info:
            raise HTTPException(status_code=404, detail="Sohbet bulunamadƒ±")
        
        # Test dosyasƒ±nƒ± oku
        chat_dir = chat_manager.get_chat_directory(chat_id)
        test_file = chat_dir / "saved_tests.json"
        
        if not test_file.exists():
            raise HTTPException(status_code=404, detail="Test bulunamadƒ±")
        
        with open(test_file, 'r', encoding='utf-8') as f:
            saved_tests = json.load(f)
        
        # Test'i bul
        test_data = None
        for test in saved_tests:
            if test.get("test_id") == test_id:
                test_data = test
                break
        
        if not test_data:
            raise HTTPException(status_code=404, detail="Test bulunamadƒ±")
        
        return JSONResponse({
            "success": True,
            "test": test_data,
            "chat_id": chat_id
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Test getirme hatasƒ±: {e}")
        raise HTTPException(status_code=500, detail=f"Test getirme hatasƒ±: {str(e)}")
